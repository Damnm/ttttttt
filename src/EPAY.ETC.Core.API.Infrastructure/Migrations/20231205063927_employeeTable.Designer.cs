// <auto-generated />
using System;
using EPAY.ETC.Core.API.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EPAY.ETC.Core.API.Infrastructure.Migrations
{
    [DbContext(typeof(CoreDbContext))]
    [Migration("20231205063927_employeeTable")]
    partial class employeeTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.Barcode.BarcodeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ActionDesc")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BarcodeAction")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Barcode");

                    b.HasData(
                        new
                        {
                            Id = new Guid("224874bf-0b78-41f5-a827-7df9f3ae2412"),
                            ActionCode = "W6FDEZ",
                            ActionDesc = "Barcode đăng nhập cho nhân viên",
                            BarcodeAction = "ControlUIAccess",
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeId = "030001"
                        },
                        new
                        {
                            Id = new Guid("6458f220-28e0-4d6b-9367-be6f5b6f2f2f"),
                            ActionCode = "K6GRG7",
                            ActionDesc = "Barcode điều khiển barrier",
                            BarcodeAction = "ControlBarrier",
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeId = "030001"
                        });
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.Configs.AppConfigModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FooterLine1")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("FooterLine2")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("HeaderHeading")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("HeaderLine1")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("HeaderLine2")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("HeaderSubHeading")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsApply")
                        .HasColumnType("boolean");

                    b.Property<string>("StationCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("IsApply");

                    b.ToTable("AppConfig");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c0f4a72-0c59-4a76-a379-4be0bc5ebd08"),
                            AppName = "Default app config",
                            CreatedDate = new DateTime(2023, 9, 27, 7, 34, 46, 0, DateTimeKind.Unspecified),
                            FooterLine1 = "TP HCM, ",
                            FooterLine2 = "Người nộp",
                            HeaderHeading = "Cảng hàng không quốc tế Tân Sơn Nhất",
                            HeaderLine1 = "ĐC: 58 Trường Sơn, Phường 2, Quận Tân Bình, TP. HCM",
                            HeaderLine2 = "ĐT: 123456789 MST: 0312451145112",
                            HeaderSubHeading = "CN tổng Công ty hàng không việt - CTCP",
                            IsApply = true,
                            StationCode = "03"
                        });
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.CustomVehicleTypes.CustomVehicleTypeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("CustomVehicleType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fffbf4d1-8b76-4f3a-9070-0cfa0a658f08"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Desc = "Xe loại 1",
                            ExternalId = "030101",
                            Name = "Type1"
                        },
                        new
                        {
                            Id = new Guid("a4a39e55-85c0-4761-ba64-f941111186f9"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Desc = "Xe loại 2",
                            ExternalId = "030102",
                            Name = "Type2"
                        },
                        new
                        {
                            Id = new Guid("be652877-ca81-4fb4-bfa1-b9cec61f9e6b"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Desc = "Xe loại 3",
                            ExternalId = "030103",
                            Name = "Type3"
                        },
                        new
                        {
                            Id = new Guid("090a7db5-2d5d-4c1c-a32c-27f946f8dd61"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Desc = "Xe loại 4",
                            ExternalId = "030104",
                            Name = "Type4"
                        });
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.Employees.EmployeeModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<short?>("Gender")
                        .HasColumnType("smallint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NickName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("StationId")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("TeamId")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.ErrorResponse.ErrorResponseModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EpayCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EpayMessage")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Function")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Source")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("ErrorResponse");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1105a445-09cd-48f2-97f9-1cc6b9be7672"),
                            Code = "400",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "301",
                            EpayMessage = "Thiếu tham số đầu vào",
                            ErrorCode = "",
                            Function = "Checkin",
                            Source = "VETC",
                            Status = "BAD_REQUEST"
                        },
                        new
                        {
                            Id = new Guid("1432aea7-f727-4282-9707-23dfbe417d53"),
                            Code = "500",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "302",
                            EpayMessage = "Không tồn tại mã RFID",
                            ErrorCode = "ETAG_NOTFOUND",
                            Function = "Checkin",
                            Source = "VETC",
                            Status = "INTERNAL_SERVER_ERROR"
                        },
                        new
                        {
                            Id = new Guid("1432aea7-f727-4282-9707-23dfbe417d54"),
                            Code = "500",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "303",
                            EpayMessage = "Không tìm thấy phương tiện trong bảng giá",
                            ErrorCode = "VEHICAL_NOTFOUND",
                            Function = "Checkin",
                            Source = "VETC",
                            Status = "INTERNAL_SERVER_ERROR"
                        },
                        new
                        {
                            Id = new Guid("25cf2789-c3f8-48c1-9392-920b3ea5a0a4"),
                            Code = "400",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "301",
                            EpayMessage = "Thiếu tham số đầu vào",
                            ErrorCode = "",
                            Function = "Checkout",
                            Source = "VETC",
                            Status = "BAD_REQUEST"
                        },
                        new
                        {
                            Id = new Guid("25ee8f5e-c899-4b55-a894-805dc3333023"),
                            Code = "500",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "302",
                            EpayMessage = "Không tồn tại mã RFID",
                            ErrorCode = "ETAG_NOTFOUND",
                            Function = "Checkout",
                            Source = "VETC",
                            Status = "INTERNAL_SERVER_ERROR"
                        },
                        new
                        {
                            Id = new Guid("25ee8f5e-c899-4b55-a894-805dc3333024"),
                            Code = "500",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "302",
                            EpayMessage = "Không tồn tại mã RFID",
                            ErrorCode = "ETAG_NOTFOUND",
                            Function = "Checkout",
                            Source = "VETC",
                            Status = "INTERNAL_SERVER_ERROR"
                        },
                        new
                        {
                            Id = new Guid("25ee8f5e-c899-4b55-a894-805dc3333025"),
                            Code = "500",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "303",
                            EpayMessage = "Không tìm thấy phương tiện trong bảng giá",
                            ErrorCode = "VEHICAL_NOTFOUND",
                            Function = "Checkout",
                            Source = "VETC",
                            Status = "INTERNAL_SERVER_ERROR"
                        },
                        new
                        {
                            Id = new Guid("25ee8f5e-c899-4b55-a894-805dc3333026"),
                            Code = "500",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "304",
                            EpayMessage = "Thanh toán thành công",
                            ErrorCode = "PAYMENT_ERROR",
                            Function = "Checkout",
                            Source = "VETC",
                            Status = "INTERNAL_SERVER_ERROR"
                        },
                        new
                        {
                            Id = new Guid("25ee8f5e-c899-4b55-a894-805dc3333027"),
                            Code = "500",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "305",
                            EpayMessage = "Tài khoản không đủ tiền",
                            ErrorCode = "NOT_ENOUGH_MONEY",
                            Function = "Checkout",
                            Source = "VETC",
                            Status = "INTERNAL_SERVER_ERROR"
                        },
                        new
                        {
                            Id = new Guid("2c1ad42f-9c67-4ed3-a2f1-f8b912acc396"),
                            Code = "400",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "301",
                            EpayMessage = "Thiếu tham số đầu vào",
                            ErrorCode = "",
                            Function = "Commit",
                            Source = "VETC",
                            Status = "BAD_REQUEST"
                        },
                        new
                        {
                            Id = new Guid("378a72d0-999e-49e9-bab3-9f68bb591de9"),
                            Code = "500",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "306",
                            EpayMessage = "Không tìm thấy giao dịch",
                            ErrorCode = "TRANSACTION_NOTFOUND",
                            Function = "Commit",
                            Source = "VETC",
                            Status = "INTERNAL_SERVER_ERROR"
                        },
                        new
                        {
                            Id = new Guid("378a72d0-999e-49e9-bab3-9f68bb591de8"),
                            Code = "500",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "307",
                            EpayMessage = "Commit giao dịch không thành công",
                            ErrorCode = "PAYMENT_ERROR",
                            Function = "Commit",
                            Source = "VETC",
                            Status = "INTERNAL_SERVER_ERROR"
                        },
                        new
                        {
                            Id = new Guid("7fe27592-d680-41a0-a8a6-0ea9441495a0"),
                            Code = "400",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "301",
                            EpayMessage = "Thiếu tham số đầu vào",
                            ErrorCode = "",
                            Function = "Rollback",
                            Source = "VETC",
                            Status = "BAD_REQUEST"
                        },
                        new
                        {
                            Id = new Guid("9ee064f5-3053-4367-822f-ecf7e2d230b0"),
                            Code = "500",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "308",
                            EpayMessage = "Roll back không thành công",
                            ErrorCode = "PAYMENT_ERROR",
                            Function = "Rollback",
                            Source = "VETC",
                            Status = "INTERNAL_SERVER_ERROR"
                        },
                        new
                        {
                            Id = new Guid("9ee064f5-3053-4367-822f-ecf7e2d230b1"),
                            Code = "500",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "306",
                            EpayMessage = "Không tìm thấy giao dịch",
                            ErrorCode = "TRANSACTION_NOTFOUND",
                            Function = "Rollback",
                            Source = "VETC",
                            Status = "INTERNAL_SERVER_ERROR"
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d64"),
                            Code = "2",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "201",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d65"),
                            Code = "3",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "202",
                            EpayMessage = "Vé đã tồn tại",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d66"),
                            Code = "4",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "203",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d67"),
                            Code = "5",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "204",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d68"),
                            Code = "6",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "205",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d70"),
                            Code = "7",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "206",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d69"),
                            Code = "6",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "205",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d71"),
                            Code = "7",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "206",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d72"),
                            Code = "8",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "207",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d46d72"),
                            Code = "9",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "208",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d73"),
                            Code = "10",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "209",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d74"),
                            Code = "11",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "210",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d75"),
                            Code = "12",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "211",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf80d45d76"),
                            Code = "13",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "212",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d76"),
                            Code = "14",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "213",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d77"),
                            Code = "15",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "214",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d78"),
                            Code = "16",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "215",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d79"),
                            Code = "17",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "216",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d80"),
                            Code = "18",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "217",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d81"),
                            Code = "19",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "218",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d82"),
                            Code = "20",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "219",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d83"),
                            Code = "21",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "220",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d84"),
                            Code = "22",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "221",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d85"),
                            Code = "23",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "222",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d86"),
                            Code = "24",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "223",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d88"),
                            Code = "25",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "224",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d89"),
                            Code = "26",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "225",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d90"),
                            Code = "27",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "226",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d91"),
                            Code = "28",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "227",
                            EpayMessage = "Không cho phép sử dụng dịch vụ",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d92"),
                            Code = "29",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "228",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d93"),
                            Code = "30",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "229",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d94"),
                            Code = "31",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "230",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d95"),
                            Code = "32",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "231",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d96"),
                            Code = "33",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "232",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d97"),
                            Code = "34",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "233",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d98"),
                            Code = "35",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "234",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45d99"),
                            Code = "36",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "235",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45c10"),
                            Code = "37",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "236",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45c11"),
                            Code = "38",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "237",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("a0a7891e-2073-4a9d-b1be-5fcf79d45c12"),
                            Code = "0",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "238",
                            EpayMessage = "Tài khoản không đủ tiền",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("f8de22ef-2f65-43fc-afd5-defb85f9a62f"),
                            Code = "1",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "501",
                            EpayMessage = "Khách hàng hủy thanh toán",
                            ErrorCode = "",
                            Function = "",
                            Source = "POS",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("f8de22ef-2f65-43fc-afd5-defb86f9a63f"),
                            Code = "2",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "502",
                            EpayMessage = "Giao dịch thất bại",
                            ErrorCode = "",
                            Function = "",
                            Source = "POS",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("f8de22ef-2f65-43fc-afd5-defb85f9a63f"),
                            Code = "3",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "503",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "POS",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("f8de22ef-2f65-43fc-afd5-defb85f9a64f"),
                            Code = "4",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "504",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "POS",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("f8de22ef-2f65-43fc-afd5-defb85f9a65f"),
                            Code = "5",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "505",
                            EpayMessage = "Tạo giao dịch bị lỗi",
                            ErrorCode = "",
                            Function = "",
                            Source = "POS",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("f8de22ef-2f65-43fc-afd5-defb85f9a66f"),
                            Code = "6",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "506",
                            EpayMessage = "Lỗi đọc thẻ",
                            ErrorCode = "",
                            Function = "",
                            Source = "POS",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("f8de22ef-2f65-43fc-afd5-defb85f9a67f"),
                            Code = "7",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "507",
                            EpayMessage = "Yêu cầu không hợp lệ",
                            ErrorCode = "",
                            Function = "",
                            Source = "POS",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("f8de22ef-2f65-43fc-afd5-defb85f9a68f"),
                            Code = "8",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "508",
                            EpayMessage = "Lỗi hệ thống",
                            ErrorCode = "",
                            Function = "",
                            Source = "POS",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("f8de22ef-2f65-43fc-afd5-defb85f9a69f"),
                            Code = "9",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "509",
                            EpayMessage = "Quá nhiều thẻ",
                            ErrorCode = "",
                            Function = "",
                            Source = "POS",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("f8de22ef-2f65-43fc-afd5-defb85f9a70f"),
                            Code = "11",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "511",
                            EpayMessage = "Số trace không hợp lệ",
                            ErrorCode = "",
                            Function = "",
                            Source = "POS",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("f8de22ef-2f65-43fc-afd5-defb85f9a71f"),
                            Code = "12",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "512",
                            EpayMessage = "Không được phép hủy",
                            ErrorCode = "",
                            Function = "",
                            Source = "POS",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("fdf50f73-ede5-4db2-82e1-5e0aa08b6c0e"),
                            Code = "13",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "513",
                            EpayMessage = "Đầy bộ nhớ",
                            ErrorCode = "",
                            Function = "",
                            Source = "VDTC",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("f8de22ef-2f65-43fc-afd5-defb85f9a73f"),
                            Code = "14",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "514",
                            EpayMessage = "Sai định dạng",
                            ErrorCode = "",
                            Function = "",
                            Source = "POS",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("f8de22ef-2f65-43fc-afd5-defb85f9a74f"),
                            Code = "15",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "515",
                            EpayMessage = "Thẻ hết hạn",
                            ErrorCode = "",
                            Function = "",
                            Source = "POS",
                            Status = ""
                        },
                        new
                        {
                            Id = new Guid("f8de22ef-2f65-43fc-afd5-defb85f9a75f"),
                            Code = "16",
                            CreatedDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EpayCode = "516",
                            EpayMessage = "Lỗi đọc file",
                            ErrorCode = "",
                            Function = "",
                            Source = "POS",
                            Status = ""
                        });
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.ETCCheckOuts.ETCCheckoutDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<string>("PlateNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RFID")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ServiceProvider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("TransactionId", "RFID", "PlateNumber");

                    b.ToTable("ETCCheckout");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.Fees.FeeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<float?>("ConfidenceScore")
                        .HasColumnType("real");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CustomVehicleTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("LaneInDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LaneInEpoch")
                        .HasColumnType("bigint");

                    b.Property<string>("LaneInId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("LaneInPlateNumberPhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LaneInVehiclePhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LaneOutDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LaneOutEpoch")
                        .HasColumnType("bigint");

                    b.Property<string>("LaneOutId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("LaneOutPlateNumberPhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LaneOutVehiclePhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Make")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Model")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("PlateColour")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PlateNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RFID")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("Seat")
                        .HasColumnType("integer");

                    b.Property<string>("ShiftId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TicketId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("TicketTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VehicleCategoryId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomVehicleTypeId");

                    b.HasIndex("LaneInDate");

                    b.HasIndex("LaneInEpoch");

                    b.HasIndex("LaneInId");

                    b.HasIndex("LaneOutDate");

                    b.HasIndex("LaneOutEpoch");

                    b.HasIndex("LaneOutId");

                    b.HasIndex("PlateNumber");

                    b.HasIndex("RFID");

                    b.HasIndex("TicketId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("Fee");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.FeeTypes.FeeTypeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FeeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("FeeType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30ee8597-aa3e-43e7-a1f1-559ee2d4b85e"),
                            Amount = 0.0,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Desc = "Miễn phí",
                            FeeName = "Free"
                        },
                        new
                        {
                            Id = new Guid("46b26ea4-abfd-4b9f-bdf4-ec0e434d9ffc"),
                            Amount = 15000.0,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Desc = "Phí cố định",
                            FeeName = "Fixed"
                        },
                        new
                        {
                            Id = new Guid("1143d8c3-22e2-4bd5-a690-89ca0c47b3c9"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Desc = "Tính phí theo thời gian",
                            FeeName = "TimeBlock"
                        },
                        new
                        {
                            Id = new Guid("04595036-c8a8-4800-9513-c4015b98da3b"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Desc = "Tính phí theo ngày",
                            FeeName = "DayBlock"
                        });
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.FeeVehicleCategories.FeeVehicleCategoryModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomVehicleTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FeeTypeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsTCPVehicle")
                        .HasColumnType("boolean");

                    b.Property<string>("PlateNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RFID")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("VehicleCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehicleGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomVehicleTypeId");

                    b.HasIndex("FeeTypeId");

                    b.HasIndex("PlateNumber");

                    b.HasIndex("RFID");

                    b.HasIndex("VehicleCategoryId");

                    b.HasIndex("VehicleGroupId");

                    b.ToTable("FeeVehicleCategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a15041a9-1d57-4ae3-b070-2d96aaa041ec"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("fffbf4d1-8b76-4f3a-9070-0cfa0a658f08"),
                            FeeTypeId = new Guid("46b26ea4-abfd-4b9f-bdf4-ec0e434d9ffc"),
                            IsTCPVehicle = false,
                            PlateNumber = "51A3268",
                            RFID = "843206065135832015",
                            ValidFrom = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidTo = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            VehicleCategoryId = new Guid("70884a61-39f3-4e8e-b936-d5b18652d3ac"),
                            VehicleGroupId = new Guid("efbe78bc-290b-4a01-a596-bbc62f60f5f3")
                        },
                        new
                        {
                            Id = new Guid("1d6603bb-d361-4111-aa45-e780f50b6974"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("a4a39e55-85c0-4761-ba64-f941111186f9"),
                            FeeTypeId = new Guid("46b26ea4-abfd-4b9f-bdf4-ec0e434d9ffc"),
                            IsTCPVehicle = false,
                            PlateNumber = "50A3008",
                            RFID = "840326156843215625",
                            ValidFrom = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidTo = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            VehicleCategoryId = new Guid("70884a61-39f3-4e8e-b936-d5b18652d3ac"),
                            VehicleGroupId = new Guid("1fc5fc58-94e4-4169-a576-3cd9ecf8eb96")
                        },
                        new
                        {
                            Id = new Guid("a743e3e1-d6aa-49c5-a63f-28ba262bc2b8"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("fffbf4d1-8b76-4f3a-9070-0cfa0a658f08"),
                            FeeTypeId = new Guid("30ee8597-aa3e-43e7-a1f1-559ee2d4b85e"),
                            IsTCPVehicle = false,
                            PlateNumber = "51A0968",
                            ValidFrom = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidTo = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            VehicleCategoryId = new Guid("70884a61-39f3-4e8e-b936-d5b18652d3ac"),
                            VehicleGroupId = new Guid("ec2a686b-8adc-4053-9e2e-4942cab0168d")
                        },
                        new
                        {
                            Id = new Guid("b780afae-6c9e-4730-a054-8ab8a876dffe"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("be652877-ca81-4fb4-bfa1-b9cec61f9e6b"),
                            FeeTypeId = new Guid("30ee8597-aa3e-43e7-a1f1-559ee2d4b85e"),
                            IsTCPVehicle = false,
                            PlateNumber = "29A3268",
                            ValidFrom = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidTo = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            VehicleCategoryId = new Guid("2b0557d0-cc6b-4fc2-a0b3-08788c9fd8c7"),
                            VehicleGroupId = new Guid("ec2a686b-8adc-4053-9e2e-4942cab0168d")
                        });
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.Fusion.FusionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ANPRCam1")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("CCTVCam2")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<long>("Epoch")
                        .HasColumnType("bigint");

                    b.Property<bool>("Loop1")
                        .HasColumnType("boolean");

                    b.Property<bool>("Loop2")
                        .HasColumnType("boolean");

                    b.Property<bool>("Loop3")
                        .HasColumnType("boolean");

                    b.Property<string>("RFID")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("ReversedLoop1")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReversedLoop2")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Fusion");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.InfringeredVehicle.InfringedVehicleModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("InfringedVehicleId");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("InfringedType")
                        .HasColumnType("integer");

                    b.Property<string>("PlateNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RFID")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("InfringedVehicle");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.ManualBarrierControl.ManualBarrierControlModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("LaneOutId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ManualBarrierType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ManualBarrierControl");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.Payment.PaymentModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CustomVehicleTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<Guid?>("FeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("LaneInId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("LaneOutId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Make")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Model")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("PlateNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RFID")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("VehicleType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("CustomVehicleTypeId");

                    b.HasIndex("FeeId");

                    b.HasIndex("LaneInId");

                    b.HasIndex("LaneOutId");

                    b.HasIndex("PlateNumber");

                    b.HasIndex("RFID");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.PaymentStatus.PaymentStatusModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("TransactionId");

                    b.ToTable("PaymentStatus");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.PrintLog.PrintLogModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PrintLogId");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DataJson")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LaneOutId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PlateNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PrintType")
                        .HasColumnType("text");

                    b.Property<string>("RFID")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("PrintLogs");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.TicketType.TicketTypeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("TicketType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fffbf4d1-8b76-4f3a-9070-0cfa0a658f08"),
                            Code = "OneTimePass",
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Xe vé lượt"
                        },
                        new
                        {
                            Id = new Guid("a4a39e55-85c0-4761-ba64-f941111186f9"),
                            Code = "Priority",
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Xe ưu tiên"
                        },
                        new
                        {
                            Id = new Guid("be652877-ca81-4fb4-bfa1-b9cec61f9e6b"),
                            Code = "FreeEntry",
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Xả trạm"
                        });
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.TimeBlockFees.TimeBlockFeeFormulaModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("ApplyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomVehicleTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("FromBlockNumber")
                        .HasColumnType("integer");

                    b.Property<long>("IntervalInSeconds")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomVehicleTypeId");

                    b.ToTable("TimeBlockFeeFormula");

                    b.HasData(
                        new
                        {
                            Id = new Guid("667b13b4-088e-4a1a-bd36-ec15e795109b"),
                            Amount = 7000.0,
                            ApplyDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("fffbf4d1-8b76-4f3a-9070-0cfa0a658f08"),
                            FromBlockNumber = 2,
                            IntervalInSeconds = 1800L
                        },
                        new
                        {
                            Id = new Guid("98c39b48-1248-4471-ae72-22e51e456307"),
                            Amount = 9000.0,
                            ApplyDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("a4a39e55-85c0-4761-ba64-f941111186f9"),
                            FromBlockNumber = 2,
                            IntervalInSeconds = 1800L
                        },
                        new
                        {
                            Id = new Guid("41369f70-ab4d-4199-a1b3-f7746fa0ff88"),
                            Amount = 14000.0,
                            ApplyDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("be652877-ca81-4fb4-bfa1-b9cec61f9e6b"),
                            FromBlockNumber = 2,
                            IntervalInSeconds = 1800L
                        },
                        new
                        {
                            Id = new Guid("8376b7a6-4330-4133-9e47-afd0d3f7c921"),
                            Amount = 14000.0,
                            ApplyDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("090a7db5-2d5d-4c1c-a32c-27f946f8dd61"),
                            FromBlockNumber = 2,
                            IntervalInSeconds = 1800L
                        });
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.TimeBlockFees.TimeBlockFeeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision");

                    b.Property<int?>("BlockDurationInSeconds")
                        .HasColumnType("integer");

                    b.Property<int>("BlockNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomVehicleTypeId")
                        .HasColumnType("uuid");

                    b.Property<long>("FromSecond")
                        .HasColumnType("bigint");

                    b.Property<long>("ToSecond")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomVehicleTypeId");

                    b.HasIndex("FromSecond", "ToSecond");

                    b.ToTable("TimeBlockFee");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad21057b-6071-4e56-8949-ce60bf54f75b"),
                            Amount = 9000.0,
                            BlockDurationInSeconds = 600,
                            BlockNumber = 0,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("fffbf4d1-8b76-4f3a-9070-0cfa0a658f08"),
                            FromSecond = 0L,
                            ToSecond = 599L
                        },
                        new
                        {
                            Id = new Guid("2e8ab3f8-8d72-4f42-831f-b0100f814a23"),
                            Amount = 14000.0,
                            BlockDurationInSeconds = 3000,
                            BlockNumber = 1,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("fffbf4d1-8b76-4f3a-9070-0cfa0a658f08"),
                            FromSecond = 600L,
                            ToSecond = 3599L
                        },
                        new
                        {
                            Id = new Guid("0c8d860a-c5ba-473c-a3f6-95aafd295a70"),
                            Amount = 21000.0,
                            BlockDurationInSeconds = 1800,
                            BlockNumber = 2,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("fffbf4d1-8b76-4f3a-9070-0cfa0a658f08"),
                            FromSecond = 3600L,
                            ToSecond = 5399L
                        },
                        new
                        {
                            Id = new Guid("e3772040-a29c-4a40-bd65-17d8be7211bb"),
                            Amount = 28000.0,
                            BlockDurationInSeconds = 1800,
                            BlockNumber = 3,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("fffbf4d1-8b76-4f3a-9070-0cfa0a658f08"),
                            FromSecond = 5400L,
                            ToSecond = 7199L
                        },
                        new
                        {
                            Id = new Guid("f8d3b541-2f77-4f14-bbe6-8a3028fccd07"),
                            Amount = 14000.0,
                            BlockDurationInSeconds = 600,
                            BlockNumber = 0,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("a4a39e55-85c0-4761-ba64-f941111186f9"),
                            FromSecond = 0L,
                            ToSecond = 599L
                        },
                        new
                        {
                            Id = new Guid("df059c09-28aa-4134-919a-e3b3041213a4"),
                            Amount = 19000.0,
                            BlockDurationInSeconds = 3000,
                            BlockNumber = 1,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("a4a39e55-85c0-4761-ba64-f941111186f9"),
                            FromSecond = 600L,
                            ToSecond = 3599L
                        },
                        new
                        {
                            Id = new Guid("120fd104-b6e4-403f-87d7-811ccb1c61e4"),
                            Amount = 28000.0,
                            BlockDurationInSeconds = 1800,
                            BlockNumber = 2,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("a4a39e55-85c0-4761-ba64-f941111186f9"),
                            FromSecond = 3600L,
                            ToSecond = 5399L
                        },
                        new
                        {
                            Id = new Guid("9302c9e0-12c2-437c-bd2d-92ed4c159e9f"),
                            Amount = 37000.0,
                            BlockDurationInSeconds = 1800,
                            BlockNumber = 3,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("a4a39e55-85c0-4761-ba64-f941111186f9"),
                            FromSecond = 5400L,
                            ToSecond = 7199L
                        },
                        new
                        {
                            Id = new Guid("8b000abd-8e74-47a3-8a90-299dc37fac4d"),
                            Amount = 14000.0,
                            BlockDurationInSeconds = 600,
                            BlockNumber = 0,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("be652877-ca81-4fb4-bfa1-b9cec61f9e6b"),
                            FromSecond = 0L,
                            ToSecond = 599L
                        },
                        new
                        {
                            Id = new Guid("8585a134-fa8f-467e-8e66-f37e75444a65"),
                            Amount = 24000.0,
                            BlockDurationInSeconds = 3000,
                            BlockNumber = 1,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("be652877-ca81-4fb4-bfa1-b9cec61f9e6b"),
                            FromSecond = 600L,
                            ToSecond = 3599L
                        },
                        new
                        {
                            Id = new Guid("b3b643cb-488d-48f3-a167-ea9531db75ca"),
                            Amount = 38000.0,
                            BlockDurationInSeconds = 1800,
                            BlockNumber = 2,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("be652877-ca81-4fb4-bfa1-b9cec61f9e6b"),
                            FromSecond = 3600L,
                            ToSecond = 5399L
                        },
                        new
                        {
                            Id = new Guid("9e891bfc-2f03-4382-8b7e-6306c2757963"),
                            Amount = 52000.0,
                            BlockDurationInSeconds = 1800,
                            BlockNumber = 3,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("be652877-ca81-4fb4-bfa1-b9cec61f9e6b"),
                            FromSecond = 5400L,
                            ToSecond = 7199L
                        },
                        new
                        {
                            Id = new Guid("f8d9683b-7cb4-4ce6-985c-5aa0a8f944e0"),
                            Amount = 24000.0,
                            BlockDurationInSeconds = 600,
                            BlockNumber = 0,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("090a7db5-2d5d-4c1c-a32c-27f946f8dd61"),
                            FromSecond = 0L,
                            ToSecond = 599L
                        },
                        new
                        {
                            Id = new Guid("8a8040ae-479c-4824-a0c2-3b4277d0ea9c"),
                            Amount = 24000.0,
                            BlockDurationInSeconds = 3000,
                            BlockNumber = 1,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("090a7db5-2d5d-4c1c-a32c-27f946f8dd61"),
                            FromSecond = 600L,
                            ToSecond = 3599L
                        },
                        new
                        {
                            Id = new Guid("adda0b07-7bd5-470b-9f89-77bb6b5cbfb2"),
                            Amount = 38000.0,
                            BlockDurationInSeconds = 1800,
                            BlockNumber = 2,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("090a7db5-2d5d-4c1c-a32c-27f946f8dd61"),
                            FromSecond = 3600L,
                            ToSecond = 5399L
                        },
                        new
                        {
                            Id = new Guid("3ae0b8be-525b-4ee4-9d49-d2889c6998c3"),
                            Amount = 52000.0,
                            BlockDurationInSeconds = 1800,
                            BlockNumber = 3,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("090a7db5-2d5d-4c1c-a32c-27f946f8dd61"),
                            FromSecond = 5400L,
                            ToSecond = 7199L
                        });
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.TransactionLog.LaneInCameraTransactionLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CameraIPAddr")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CameraMacAddr")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("ConfidenceScore")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("Epoch")
                        .HasColumnType("bigint");

                    b.Property<string>("LaneInId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Make")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Model")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("PlateColour")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PlateNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PlateNumberPhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PlateNumberRearPhotoUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("RFID")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RearPlateColour")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RearPlateNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("Seat")
                        .HasColumnType("integer");

                    b.Property<string>("VehiclePhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("VehicleRearPhotoUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("VehicleType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("LaneInCameraTransactionLog");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.TransactionLog.LaneInRFIDTransactionLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("ConfidenceScore")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("Epoch")
                        .HasColumnType("bigint");

                    b.Property<string>("LaneInId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Make")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Model")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("PlateColour")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PlateNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PlateNumberPhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PlateNumberRearPhotoUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("RFID")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RFIDReaderIPAddr")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RFIDReaderMacAddr")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RearPlateColour")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RearPlateNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("Seat")
                        .HasColumnType("integer");

                    b.Property<string>("VehiclePhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("VehicleRearPhotoUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("VehicleType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("LaneInRFIDTransactionLog");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.Vehicle.VehicleModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Make")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Model")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("PlateColor")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PlateNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RFID")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("Seat")
                        .HasColumnType("integer");

                    b.Property<string>("VehicleType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.VehicleCategories.VehicleCategoryModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<string>("VehicleCategoryName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("VehicleCategoryType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("VehicleCategory");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.VehicleGroups.VehicleGroupModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("VehicleGroup");

                    b.HasData(
                        new
                        {
                            Id = new Guid("efbe78bc-290b-4a01-a596-bbc62f60f5f3"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            GroupName = "Taxi Mai Linh"
                        },
                        new
                        {
                            Id = new Guid("1fc5fc58-94e4-4169-a576-3cd9ecf8eb96"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            GroupName = "Taxi Xanh"
                        },
                        new
                        {
                            Id = new Guid("ec2a686b-8adc-4053-9e2e-4942cab0168d"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            GroupName = "Công ty vận tải hành khách"
                        });
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.ETCCheckOuts.ETCCheckoutDataModel", b =>
                {
                    b.HasOne("EPAY.ETC.Core.API.Core.Models.Payment.PaymentModel", "Payment")
                        .WithMany("ETCCheckOuts")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.Fees.FeeModel", b =>
                {
                    b.HasOne("EPAY.ETC.Core.API.Core.Models.CustomVehicleTypes.CustomVehicleTypeModel", "CustomVehicleType")
                        .WithMany("Fees")
                        .HasForeignKey("CustomVehicleTypeId");

                    b.HasOne("EPAY.ETC.Core.API.Core.Models.TicketType.TicketTypeModel", "TicketType")
                        .WithMany("Fees")
                        .HasForeignKey("TicketTypeId");

                    b.Navigation("CustomVehicleType");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.FeeVehicleCategories.FeeVehicleCategoryModel", b =>
                {
                    b.HasOne("EPAY.ETC.Core.API.Core.Models.CustomVehicleTypes.CustomVehicleTypeModel", "CustomVehicleType")
                        .WithMany("FeeVehicleCategories")
                        .HasForeignKey("CustomVehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPAY.ETC.Core.API.Core.Models.FeeTypes.FeeTypeModel", "FeeType")
                        .WithMany("FeeVehicleCategories")
                        .HasForeignKey("FeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPAY.ETC.Core.API.Core.Models.VehicleCategories.VehicleCategoryModel", "VehicleCategory")
                        .WithMany("FeeVehicleCategories")
                        .HasForeignKey("VehicleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPAY.ETC.Core.API.Core.Models.VehicleGroups.VehicleGroupModel", "VehicleGroup")
                        .WithMany("FeeVehicleCategories")
                        .HasForeignKey("VehicleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomVehicleType");

                    b.Navigation("FeeType");

                    b.Navigation("VehicleCategory");

                    b.Navigation("VehicleGroup");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.Payment.PaymentModel", b =>
                {
                    b.HasOne("EPAY.ETC.Core.API.Core.Models.CustomVehicleTypes.CustomVehicleTypeModel", "CustomVehicleType")
                        .WithMany("Payments")
                        .HasForeignKey("CustomVehicleTypeId");

                    b.HasOne("EPAY.ETC.Core.API.Core.Models.Fees.FeeModel", "Fee")
                        .WithMany("Payments")
                        .HasForeignKey("FeeId");

                    b.Navigation("CustomVehicleType");

                    b.Navigation("Fee");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.PaymentStatus.PaymentStatusModel", b =>
                {
                    b.HasOne("EPAY.ETC.Core.API.Core.Models.Payment.PaymentModel", "Payment")
                        .WithMany("PaymentStatuses")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.TimeBlockFees.TimeBlockFeeFormulaModel", b =>
                {
                    b.HasOne("EPAY.ETC.Core.API.Core.Models.CustomVehicleTypes.CustomVehicleTypeModel", "CustomVehicleType")
                        .WithMany("TimeBlockFeeFormulas")
                        .HasForeignKey("CustomVehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomVehicleType");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.TimeBlockFees.TimeBlockFeeModel", b =>
                {
                    b.HasOne("EPAY.ETC.Core.API.Core.Models.CustomVehicleTypes.CustomVehicleTypeModel", "CustomVehicleType")
                        .WithMany("TimeBlockFees")
                        .HasForeignKey("CustomVehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomVehicleType");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.CustomVehicleTypes.CustomVehicleTypeModel", b =>
                {
                    b.Navigation("FeeVehicleCategories");

                    b.Navigation("Fees");

                    b.Navigation("Payments");

                    b.Navigation("TimeBlockFeeFormulas");

                    b.Navigation("TimeBlockFees");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.Fees.FeeModel", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.FeeTypes.FeeTypeModel", b =>
                {
                    b.Navigation("FeeVehicleCategories");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.Payment.PaymentModel", b =>
                {
                    b.Navigation("ETCCheckOuts");

                    b.Navigation("PaymentStatuses");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.TicketType.TicketTypeModel", b =>
                {
                    b.Navigation("Fees");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.VehicleCategories.VehicleCategoryModel", b =>
                {
                    b.Navigation("FeeVehicleCategories");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.VehicleGroups.VehicleGroupModel", b =>
                {
                    b.Navigation("FeeVehicleCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
