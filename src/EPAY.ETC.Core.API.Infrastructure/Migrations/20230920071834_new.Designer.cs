// <auto-generated />
using System;
using EPAY.ETC.Core.API.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EPAY.ETC.Core.API.Infrastructure.Migrations
{
    [DbContext(typeof(CoreDbContext))]
    [Migration("20230920071834_new")]
    partial class @new
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.CustomVehicleTypes.CustomVehicleTypeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("CustomVehicleType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fffbf4d1-8b76-4f3a-9070-0cfa0a658f08"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Desc = "Xe loại 1",
                            Name = "Type1"
                        },
                        new
                        {
                            Id = new Guid("a4a39e55-85c0-4761-ba64-f941111186f9"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Desc = "Xe loại 2",
                            Name = "Type2"
                        },
                        new
                        {
                            Id = new Guid("be652877-ca81-4fb4-bfa1-b9cec61f9e6b"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Desc = "Xe loại 3",
                            Name = "Type3"
                        },
                        new
                        {
                            Id = new Guid("090a7db5-2d5d-4c1c-a32c-27f946f8dd61"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Desc = "Xe loại 4",
                            Name = "Type4"
                        });
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.FeeTypes.FeeTypeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("FeeType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30ee8597-aa3e-43e7-a1f1-559ee2d4b85e"),
                            Amount = 0.0,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Desc = "Miễn phí",
                            Name = "Free"
                        },
                        new
                        {
                            Id = new Guid("46b26ea4-abfd-4b9f-bdf4-ec0e434d9ffc"),
                            Amount = 15000.0,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Desc = "Phí cố định",
                            Name = "Fixed"
                        },
                        new
                        {
                            Id = new Guid("1143d8c3-22e2-4bd5-a690-89ca0c47b3c9"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Desc = "Tính phí theo thời gian",
                            Name = "TimeBlock"
                        },
                        new
                        {
                            Id = new Guid("04595036-c8a8-4800-9513-c4015b98da3b"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Desc = "Tính phí theo ngày",
                            Name = "DayBlock"
                        });
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.FeeVehicleCategories.FeeVehicleCategoryModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomVehicleTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FeeTypeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsTCPVehicle")
                        .HasColumnType("boolean");

                    b.Property<string>("PlateNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RFID")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("VehicleCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehicleGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomVehicleTypeId");

                    b.HasIndex("FeeTypeId");

                    b.HasIndex("PlateNumber");

                    b.HasIndex("RFID");

                    b.HasIndex("VehicleCategoryId");

                    b.HasIndex("VehicleGroupId");

                    b.ToTable("FeeVehicleCategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a15041a9-1d57-4ae3-b070-2d96aaa041ec"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("fffbf4d1-8b76-4f3a-9070-0cfa0a658f08"),
                            FeeTypeId = new Guid("46b26ea4-abfd-4b9f-bdf4-ec0e434d9ffc"),
                            IsTCPVehicle = false,
                            PlateNumber = "51A3268",
                            RFID = "843206065135832015",
                            ValidFrom = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidTo = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            VehicleCategoryId = new Guid("70884a61-39f3-4e8e-b936-d5b18652d3ac"),
                            VehicleGroupId = new Guid("efbe78bc-290b-4a01-a596-bbc62f60f5f3")
                        },
                        new
                        {
                            Id = new Guid("1d6603bb-d361-4111-aa45-e780f50b6974"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("a4a39e55-85c0-4761-ba64-f941111186f9"),
                            FeeTypeId = new Guid("46b26ea4-abfd-4b9f-bdf4-ec0e434d9ffc"),
                            IsTCPVehicle = false,
                            PlateNumber = "50A3008",
                            RFID = "840326156843215625",
                            ValidFrom = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidTo = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            VehicleCategoryId = new Guid("70884a61-39f3-4e8e-b936-d5b18652d3ac"),
                            VehicleGroupId = new Guid("1fc5fc58-94e4-4169-a576-3cd9ecf8eb96")
                        },
                        new
                        {
                            Id = new Guid("a743e3e1-d6aa-49c5-a63f-28ba262bc2b8"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("fffbf4d1-8b76-4f3a-9070-0cfa0a658f08"),
                            FeeTypeId = new Guid("30ee8597-aa3e-43e7-a1f1-559ee2d4b85e"),
                            IsTCPVehicle = false,
                            PlateNumber = "51A0968",
                            ValidFrom = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidTo = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            VehicleCategoryId = new Guid("70884a61-39f3-4e8e-b936-d5b18652d3ac"),
                            VehicleGroupId = new Guid("ec2a686b-8adc-4053-9e2e-4942cab0168d")
                        },
                        new
                        {
                            Id = new Guid("b780afae-6c9e-4730-a054-8ab8a876dffe"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("be652877-ca81-4fb4-bfa1-b9cec61f9e6b"),
                            FeeTypeId = new Guid("30ee8597-aa3e-43e7-a1f1-559ee2d4b85e"),
                            IsTCPVehicle = false,
                            PlateNumber = "29A3268",
                            ValidFrom = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidTo = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            VehicleCategoryId = new Guid("2b0557d0-cc6b-4fc2-a0b3-08788c9fd8c7"),
                            VehicleGroupId = new Guid("ec2a686b-8adc-4053-9e2e-4942cab0168d")
                        });
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.Fees.FeeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<float?>("ConfidenceScore")
                        .HasColumnType("real");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CustomVehicleTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("LaneInDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LaneInEpoch")
                        .HasColumnType("bigint");

                    b.Property<string>("LaneInId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("LaneInPlateNumberPhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LaneInVehiclePhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LaneOutDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LaneOutEpoch")
                        .HasColumnType("bigint");

                    b.Property<string>("LaneOutId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("LaneOutPlateNumberPhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LaneOutVehiclePhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Make")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Model")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("PlateColour")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PlateNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RFID")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("Seat")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ShiftId")
                        .HasColumnType("uuid");

                    b.Property<string>("TicketId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TicketTypeId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("VehicleCategoryId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomVehicleTypeId");

                    b.HasIndex("LaneInDate");

                    b.HasIndex("LaneInEpoch");

                    b.HasIndex("LaneInId");

                    b.HasIndex("LaneOutDate");

                    b.HasIndex("LaneOutEpoch");

                    b.HasIndex("LaneOutId");

                    b.HasIndex("PlateNumber");

                    b.HasIndex("RFID");

                    b.HasIndex("TicketId");

                    b.ToTable("Fee");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.Fusion.FusionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cam1")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Cam2")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<float>("Epoch")
                        .HasColumnType("real");

                    b.Property<bool>("Loop1")
                        .HasColumnType("boolean");

                    b.Property<bool>("Loop2")
                        .HasColumnType("boolean");

                    b.Property<bool>("Loop3")
                        .HasColumnType("boolean");

                    b.Property<bool>("RFID")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReversedLoop1")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReversedLoop2")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Fusions");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.TimeBlockFees.TimeBlockFeeFormulaModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("ApplyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomVehicleTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("FromBlockNumber")
                        .HasColumnType("integer");

                    b.Property<long>("IntervalInSeconds")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomVehicleTypeId");

                    b.ToTable("TimeBlockFeeFormulas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("667b13b4-088e-4a1a-bd36-ec15e795109b"),
                            Amount = 7000.0,
                            ApplyDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("fffbf4d1-8b76-4f3a-9070-0cfa0a658f08"),
                            FromBlockNumber = 2,
                            IntervalInSeconds = 1800L
                        },
                        new
                        {
                            Id = new Guid("98c39b48-1248-4471-ae72-22e51e456307"),
                            Amount = 9000.0,
                            ApplyDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("a4a39e55-85c0-4761-ba64-f941111186f9"),
                            FromBlockNumber = 2,
                            IntervalInSeconds = 1800L
                        },
                        new
                        {
                            Id = new Guid("41369f70-ab4d-4199-a1b3-f7746fa0ff88"),
                            Amount = 14000.0,
                            ApplyDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("be652877-ca81-4fb4-bfa1-b9cec61f9e6b"),
                            FromBlockNumber = 2,
                            IntervalInSeconds = 1800L
                        },
                        new
                        {
                            Id = new Guid("8376b7a6-4330-4133-9e47-afd0d3f7c921"),
                            Amount = 14000.0,
                            ApplyDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("090a7db5-2d5d-4c1c-a32c-27f946f8dd61"),
                            FromBlockNumber = 2,
                            IntervalInSeconds = 1800L
                        });
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.TimeBlockFees.TimeBlockFeeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision");

                    b.Property<int?>("BlockDurationInSeconds")
                        .HasColumnType("integer");

                    b.Property<int>("BlockNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomVehicleTypeId")
                        .HasColumnType("uuid");

                    b.Property<long>("FromSecond")
                        .HasColumnType("bigint");

                    b.Property<long>("ToSecond")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomVehicleTypeId");

                    b.HasIndex("FromSecond", "ToSecond");

                    b.ToTable("TimeBlockFee");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad21057b-6071-4e56-8949-ce60bf54f75b"),
                            Amount = 9000.0,
                            BlockDurationInSeconds = 600,
                            BlockNumber = 0,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("fffbf4d1-8b76-4f3a-9070-0cfa0a658f08"),
                            FromSecond = 0L,
                            ToSecond = 599L
                        },
                        new
                        {
                            Id = new Guid("2e8ab3f8-8d72-4f42-831f-b0100f814a23"),
                            Amount = 14000.0,
                            BlockDurationInSeconds = 3000,
                            BlockNumber = 1,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("fffbf4d1-8b76-4f3a-9070-0cfa0a658f08"),
                            FromSecond = 600L,
                            ToSecond = 3599L
                        },
                        new
                        {
                            Id = new Guid("0c8d860a-c5ba-473c-a3f6-95aafd295a70"),
                            Amount = 21000.0,
                            BlockDurationInSeconds = 1800,
                            BlockNumber = 2,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("fffbf4d1-8b76-4f3a-9070-0cfa0a658f08"),
                            FromSecond = 3600L,
                            ToSecond = 5399L
                        },
                        new
                        {
                            Id = new Guid("e3772040-a29c-4a40-bd65-17d8be7211bb"),
                            Amount = 28000.0,
                            BlockDurationInSeconds = 1800,
                            BlockNumber = 3,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("fffbf4d1-8b76-4f3a-9070-0cfa0a658f08"),
                            FromSecond = 5400L,
                            ToSecond = 7199L
                        },
                        new
                        {
                            Id = new Guid("f8d3b541-2f77-4f14-bbe6-8a3028fccd07"),
                            Amount = 14000.0,
                            BlockDurationInSeconds = 600,
                            BlockNumber = 0,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("a4a39e55-85c0-4761-ba64-f941111186f9"),
                            FromSecond = 0L,
                            ToSecond = 599L
                        },
                        new
                        {
                            Id = new Guid("df059c09-28aa-4134-919a-e3b3041213a4"),
                            Amount = 19000.0,
                            BlockDurationInSeconds = 3000,
                            BlockNumber = 1,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("a4a39e55-85c0-4761-ba64-f941111186f9"),
                            FromSecond = 600L,
                            ToSecond = 3599L
                        },
                        new
                        {
                            Id = new Guid("120fd104-b6e4-403f-87d7-811ccb1c61e4"),
                            Amount = 28000.0,
                            BlockDurationInSeconds = 1800,
                            BlockNumber = 2,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("a4a39e55-85c0-4761-ba64-f941111186f9"),
                            FromSecond = 3600L,
                            ToSecond = 5399L
                        },
                        new
                        {
                            Id = new Guid("9302c9e0-12c2-437c-bd2d-92ed4c159e9f"),
                            Amount = 37000.0,
                            BlockDurationInSeconds = 1800,
                            BlockNumber = 3,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("a4a39e55-85c0-4761-ba64-f941111186f9"),
                            FromSecond = 5400L,
                            ToSecond = 7199L
                        },
                        new
                        {
                            Id = new Guid("8b000abd-8e74-47a3-8a90-299dc37fac4d"),
                            Amount = 14000.0,
                            BlockDurationInSeconds = 600,
                            BlockNumber = 0,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("be652877-ca81-4fb4-bfa1-b9cec61f9e6b"),
                            FromSecond = 0L,
                            ToSecond = 599L
                        },
                        new
                        {
                            Id = new Guid("8585a134-fa8f-467e-8e66-f37e75444a65"),
                            Amount = 24000.0,
                            BlockDurationInSeconds = 3000,
                            BlockNumber = 1,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("be652877-ca81-4fb4-bfa1-b9cec61f9e6b"),
                            FromSecond = 600L,
                            ToSecond = 3599L
                        },
                        new
                        {
                            Id = new Guid("b3b643cb-488d-48f3-a167-ea9531db75ca"),
                            Amount = 38000.0,
                            BlockDurationInSeconds = 1800,
                            BlockNumber = 2,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("be652877-ca81-4fb4-bfa1-b9cec61f9e6b"),
                            FromSecond = 3600L,
                            ToSecond = 5399L
                        },
                        new
                        {
                            Id = new Guid("9e891bfc-2f03-4382-8b7e-6306c2757963"),
                            Amount = 52000.0,
                            BlockDurationInSeconds = 1800,
                            BlockNumber = 3,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("be652877-ca81-4fb4-bfa1-b9cec61f9e6b"),
                            FromSecond = 5400L,
                            ToSecond = 7199L
                        },
                        new
                        {
                            Id = new Guid("f8d9683b-7cb4-4ce6-985c-5aa0a8f944e0"),
                            Amount = 24000.0,
                            BlockDurationInSeconds = 600,
                            BlockNumber = 0,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("090a7db5-2d5d-4c1c-a32c-27f946f8dd61"),
                            FromSecond = 0L,
                            ToSecond = 599L
                        },
                        new
                        {
                            Id = new Guid("8a8040ae-479c-4824-a0c2-3b4277d0ea9c"),
                            Amount = 24000.0,
                            BlockDurationInSeconds = 3000,
                            BlockNumber = 1,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("090a7db5-2d5d-4c1c-a32c-27f946f8dd61"),
                            FromSecond = 600L,
                            ToSecond = 3599L
                        },
                        new
                        {
                            Id = new Guid("adda0b07-7bd5-470b-9f89-77bb6b5cbfb2"),
                            Amount = 38000.0,
                            BlockDurationInSeconds = 1800,
                            BlockNumber = 2,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("090a7db5-2d5d-4c1c-a32c-27f946f8dd61"),
                            FromSecond = 3600L,
                            ToSecond = 5399L
                        },
                        new
                        {
                            Id = new Guid("3ae0b8be-525b-4ee4-9d49-d2889c6998c3"),
                            Amount = 52000.0,
                            BlockDurationInSeconds = 1800,
                            BlockNumber = 3,
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomVehicleTypeId = new Guid("090a7db5-2d5d-4c1c-a32c-27f946f8dd61"),
                            FromSecond = 5400L,
                            ToSecond = 7199L
                        });
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.Transaction.VehiclePaymentTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("boolean");

                    b.Property<string>("PaymentType")
                        .HasColumnType("text");

                    b.Property<Guid>("VehicleTransactionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("VehiclePaymentTransactions");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.Transaction.VehicleTransactionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<Guid>("ExternalEmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LaneInDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("LaneInId")
                        .HasColumnType("uuid");

                    b.Property<string>("LaneInPlateNumberPhotoURL")
                        .HasColumnType("text");

                    b.Property<string>("LaneInVehiclePhotoURL")
                        .HasColumnType("text");

                    b.Property<DateTime>("LaneOutDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("LaneOutId")
                        .HasColumnType("uuid");

                    b.Property<string>("LaneOutPlateNumberPhotoURL")
                        .HasColumnType("text");

                    b.Property<string>("LaneOutVehiclePhotoURL")
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text");

                    b.Property<string>("PlateNumber")
                        .HasColumnType("text");

                    b.Property<string>("RFID")
                        .HasColumnType("text");

                    b.Property<Guid>("ShiftId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("VehicleTransactionModels");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.TransactionLog.LaneInCameraTransactionLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CameraReaderIPAddr")
                        .HasColumnType("text");

                    b.Property<string>("CameraReaderMacAddr")
                        .HasColumnType("text");

                    b.Property<double>("ConfidenceScore")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Epoch")
                        .HasColumnType("double precision");

                    b.Property<Guid>("LaneInId")
                        .HasColumnType("uuid");

                    b.Property<string>("Make")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<string>("PlateColour")
                        .HasColumnType("text");

                    b.Property<string>("PlateNumber")
                        .HasColumnType("text");

                    b.Property<string>("PlateNumberPhotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("RFID")
                        .HasColumnType("text");

                    b.Property<int?>("Seat")
                        .HasColumnType("integer");

                    b.Property<string>("VehiclePhotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("VehicleType")
                        .HasColumnType("text");

                    b.Property<int?>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("LaneInCameraTransactionLogs");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.TransactionLog.LaneInRFIDTransactionLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("ConfidenceScore")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Epoch")
                        .HasColumnType("double precision");

                    b.Property<Guid>("LaneInId")
                        .HasColumnType("uuid");

                    b.Property<string>("Make")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<string>("PlateColour")
                        .HasColumnType("text");

                    b.Property<string>("PlateNumber")
                        .HasColumnType("text");

                    b.Property<string>("PlateNumberPhotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("RFID")
                        .HasColumnType("text");

                    b.Property<string>("RFIDReaderIPAddr")
                        .HasColumnType("text");

                    b.Property<string>("RFIDReaderMacAddr")
                        .HasColumnType("text");

                    b.Property<int>("Seat")
                        .HasColumnType("integer");

                    b.Property<string>("VehiclePhotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("VehicleType")
                        .HasColumnType("text");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("LaneInRFIDTransactionLogs");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.Vehicle.VehicleModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Make")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<string>("PlateColor")
                        .HasColumnType("text");

                    b.Property<string>("PlateNumber")
                        .HasColumnType("text");

                    b.Property<string>("RFID")
                        .HasColumnType("text");

                    b.Property<int?>("Seat")
                        .HasColumnType("integer");

                    b.Property<string>("VehicleType")
                        .HasColumnType("text");

                    b.Property<int?>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.VehicleCategories.VehicleCategoryModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("VehicleCategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("70884a61-39f3-4e8e-b936-d5b18652d3ac"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Xe nhượng quyền"
                        },
                        new
                        {
                            Id = new Guid("82f143d3-b2ed-40d6-a59e-4fc980a24450"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Xe nhượng quyền TCP"
                        },
                        new
                        {
                            Id = new Guid("2b0557d0-cc6b-4fc2-a0b3-08788c9fd8c7"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Xe ưu tiên theo tháng"
                        },
                        new
                        {
                            Id = new Guid("bd4e670d-8cae-46fa-8bac-d77ac139a044"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Xe ưu tiên theo quý"
                        },
                        new
                        {
                            Id = new Guid("ac9b71a5-0541-4d2e-a358-6afac6d6c525"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Xe ưu tiên theo năm"
                        });
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.VehicleGroups.VehicleGroupModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("VehicleGroup");

                    b.HasData(
                        new
                        {
                            Id = new Guid("efbe78bc-290b-4a01-a596-bbc62f60f5f3"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Taxi Mai Linh"
                        },
                        new
                        {
                            Id = new Guid("1fc5fc58-94e4-4169-a576-3cd9ecf8eb96"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Taxi Xanh"
                        },
                        new
                        {
                            Id = new Guid("ec2a686b-8adc-4053-9e2e-4942cab0168d"),
                            CreatedDate = new DateTime(2023, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Công ty vận tải hành khách"
                        });
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.FeeVehicleCategories.FeeVehicleCategoryModel", b =>
                {
                    b.HasOne("EPAY.ETC.Core.API.Core.Models.CustomVehicleTypes.CustomVehicleTypeModel", "CustomVehicleType")
                        .WithMany("FeeVehicleCategories")
                        .HasForeignKey("CustomVehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPAY.ETC.Core.API.Core.Models.FeeTypes.FeeTypeModel", "FeeType")
                        .WithMany("FeeVehicleCategories")
                        .HasForeignKey("FeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPAY.ETC.Core.API.Core.Models.VehicleCategories.VehicleCategoryModel", "VehicleCategory")
                        .WithMany("FeeVehicleCategories")
                        .HasForeignKey("VehicleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPAY.ETC.Core.API.Core.Models.VehicleGroups.VehicleGroupModel", "VehicleGroup")
                        .WithMany("FeeVehicleCategories")
                        .HasForeignKey("VehicleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomVehicleType");

                    b.Navigation("FeeType");

                    b.Navigation("VehicleCategory");

                    b.Navigation("VehicleGroup");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.Fees.FeeModel", b =>
                {
                    b.HasOne("EPAY.ETC.Core.API.Core.Models.CustomVehicleTypes.CustomVehicleTypeModel", "CustomVehicleType")
                        .WithMany("Fees")
                        .HasForeignKey("CustomVehicleTypeId");

                    b.Navigation("CustomVehicleType");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.TimeBlockFees.TimeBlockFeeFormulaModel", b =>
                {
                    b.HasOne("EPAY.ETC.Core.API.Core.Models.CustomVehicleTypes.CustomVehicleTypeModel", "CustomVehicleType")
                        .WithMany("TimeBlockFeeFormulas")
                        .HasForeignKey("CustomVehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomVehicleType");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.TimeBlockFees.TimeBlockFeeModel", b =>
                {
                    b.HasOne("EPAY.ETC.Core.API.Core.Models.CustomVehicleTypes.CustomVehicleTypeModel", "CustomVehicleType")
                        .WithMany("TimeBlockFees")
                        .HasForeignKey("CustomVehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomVehicleType");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.CustomVehicleTypes.CustomVehicleTypeModel", b =>
                {
                    b.Navigation("FeeVehicleCategories");

                    b.Navigation("Fees");

                    b.Navigation("TimeBlockFeeFormulas");

                    b.Navigation("TimeBlockFees");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.FeeTypes.FeeTypeModel", b =>
                {
                    b.Navigation("FeeVehicleCategories");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.VehicleCategories.VehicleCategoryModel", b =>
                {
                    b.Navigation("FeeVehicleCategories");
                });

            modelBuilder.Entity("EPAY.ETC.Core.API.Core.Models.VehicleGroups.VehicleGroupModel", b =>
                {
                    b.Navigation("FeeVehicleCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
